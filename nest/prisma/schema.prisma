// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                      String          @id @default(cuid())
    intraId                 String          @unique()
    name                    String          @unique
    createdAt               DateTime        @default(now())
    updatedAt               DateTime        @updatedAt
    filename                String?
    creationMode            Boolean         @default(true)
    status                  UserStatus      @default(OFFLINE)
    messagesSent            Message[]       @relation("messageSender")
    userOnChannels          ChannelUser[]   @relation("userOnChannel")
    channelActionRequester  ChannelAction[] @relation("channelActionRequester")
    channelActionTarget     ChannelAction[] @relation("channelActionTarget")
    channelBlockedRequester BlockedUser[]   @relation("channelBlockedRequester")
    channelBlockedTarget    BlockedUser[]   @relation("channelBlockedTarget")
    invites                 Channel[]       @relation("inviteOnChannel")
    friendsRequester        Friendship[]    @relation("requester")
    friendsAddressee        Friendship[]    @relation("addressee")
    secondFactorEnabled     Boolean         @default(false)
    secondFactorLogged      Boolean         @default(false)
    secondFactorSecret      String?

        // Game shit
    playerOneMatch                Match[]           @relation("playerOne")
    playerTwoMatch                Match[]           @relation("playerTwo")
    eloScore                      Int               @default(1000)

    @@map("users")
}

model Match {
  gameId    String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  p1s Int
  p2s Int

  winnerId String @default ("")

  playerOneId String
  playerOne   User   @relation("playerOne", fields: [playerOneId], references: [id], onDelete: Cascade)
  playerTwoId String
  playerTwo   User   @relation("playerTwo", fields: [playerTwoId], references: [id], onDelete: Cascade)

  // @@id([playerOneId, playerTwoId, createdAt])
  // @@unique(fields: [playerOneId, playerTwoId, createdAt], name: "gameId")
}

model Channel {
    id           String      @id @default(cuid())
    name         String      @unique @default(cuid())
    type         ChannelType @default(PUBLIC)
    passwordHash String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    messages               Message[]       @relation("channelMessage")
    users                  ChannelUser[]   @relation("channelUsers")
    channelActionOnChannel ChannelAction[] @relation("channelActionOnChannel")
    invites                User[]          @relation("inviteOnChannel")

    @@map("channels")
}

model Message {
    id      String @id @default(cuid())
    content String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    senderId  	String
    sender    	User    @relation("messageSender", fields: [senderId], references: [id], onDelete: Cascade)
	channelId 	String
    channel   	Channel @relation("channelMessage", fields: [channelId], references: [id], onDelete: Cascade)

    @@map("messages")
}

model ChannelUser {
    userId    String
    user      User    @relation("userOnChannel", fields: [userId], references: [id], onDelete: Cascade)
    channelId String
    channel   Channel @relation("channelUsers", fields: [channelId], references: [id], onDelete: Cascade)

    role      ChannelRole @default(USER)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    @@id([userId, channelId])
    @@map("channel_users")
}

model ChannelAction {
    channelActionTargetId    String
    channelActionTarget      User              @relation("channelActionTarget", fields: [channelActionTargetId], references: [id], onDelete: Cascade)
    channelActionOnChannelId String
    channelActionOnChannel   Channel           @relation("channelActionOnChannel", fields: [channelActionOnChannelId], references: [id], onDelete: Cascade)
    channelActionTime        DateTime
    type                     ChannelActionType

    channelActionRequesterId String
    channelActionRequester   User   @relation("channelActionRequester", fields: [channelActionRequesterId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([channelActionTargetId, channelActionOnChannelId, channelActionRequesterId, type])
    @@unique([channelActionTargetId, channelActionOnChannelId, type])
    @@map("channel_actions")
}

model BlockedUser {
    channelBlockedTargetId    String
    channelBlockedTarget      User   @relation("channelBlockedTarget", fields: [channelBlockedTargetId], references: [id], onDelete: Cascade)
    channelBlockedRequesterId String
    channelBlockedRequester   User   @relation("channelBlockedRequester", fields: [channelBlockedRequesterId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([channelBlockedTargetId, channelBlockedRequesterId])
    @@unique(fields: [channelBlockedRequesterId, channelBlockedTargetId], name: "blockedId")
    @@map("blocked")
}

model Friendship {
    requesterId String
    requester   User   @relation("requester", fields: [requesterId], references: [id], onDelete: Cascade)
    addresseeId String
    addressee   User   @relation("addressee", fields: [addresseeId], references: [id], onDelete: Cascade)

    status    FriendshipStatus @default(NONE)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    @@id([requesterId, addresseeId])
    @@unique(fields: [requesterId, addresseeId], name: "friendshipId")
    @@map("friendships")
}

enum ChannelType {
    PUBLIC
    PRIVATE
    PROTECTED
    DIRECTMESSAGE
}

enum ChannelRole {
    USER
    ADMIN
    OWNER
}

enum UserStatus {
    OFFLINE
    ONLINE
    PLAYING
}

enum ChannelActionType {
    BAN
    MUTE
}

enum FriendshipStatus {
    REQUESTED
    ACCEPTED
    NONE
}
